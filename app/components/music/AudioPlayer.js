"use client";

import { useEffect, useRef, useState } from "react";
import {
  cleanupAudio,
  handleBuffering,
  optimizeAudioLoading,
} from "../../utils/audio";

export default function AudioPlayer({ audioUrl }) {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [volume, setVolume] = useState(0.5);
  const [isMuted, setIsMuted] = useState(false);
  const [isBuffering, setIsBuffering] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const previousVolume = useRef(0.5);
  const audioRef = useRef(null);

  // Détecter si l'appareil est mobile
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768);
    };

    checkMobile();
    window.addEventListener("resize", checkMobile);

    return () => {
      window.removeEventListener("resize", checkMobile);
    };
  }, []);

  // Initialiser la propriété CSS du volume au montage
  useEffect(() => {
    const volumeSlider = document.querySelector(
      '.volume-slider input[type="range"]'
    );
    if (volumeSlider) {
      volumeSlider.style.setProperty("--volume-percentage", `${volume * 100}%`);
    }
  }, []);

  useEffect(() => {
    let mounted = true;

    const setupAudio = async () => {
      try {
        setIsLoading(true);
        setError(null);

        // Utiliser la nouvelle fonction d'optimisation
        const optimizedUrl = await optimizeAudioLoading(audioUrl);

        if (!mounted) return;

        audioRef.current = new Audio(optimizedUrl);
        audioRef.current.volume = volume;

        // Améliorer la gestion du buffer sur mobile
        if (isMobile) {
          audioRef.current.preload = "auto";
        }

        // Configurer les événements
        audioRef.current.addEventListener("timeupdate", updateTime);
        audioRef.current.addEventListener("loadedmetadata", () => {
          setDuration(audioRef.current.duration);
          setIsLoading(false);
        });
        audioRef.current.addEventListener("ended", () => setIsPlaying(false));

        // Gestion améliorée du buffering
        audioRef.current.addEventListener("waiting", () => {
          setIsBuffering(true);
          if (isMobile) {
            // Réduire la qualité sur mobile pendant le buffering
            audioRef.current.playbackRate = 0.8;
          }
        });
        audioRef.current.addEventListener("canplay", () => {
          setIsBuffering(false);
          if (isMobile) {
            // Restaurer la qualité normale
            audioRef.current.playbackRate = 1.0;
          }
        });

        // Attendre que le buffer soit suffisant
        await handleBuffering(audioRef.current);

        if (!mounted) return;
        setIsLoading(false);
      } catch (err) {
        if (mounted) {
          setError(err.message);
          setIsLoading(false);
        }
      }
    };

    setupAudio();

    return () => {
      mounted = false;
      if (audioRef.current) {
        cleanupAudio(audioRef.current);
        audioRef.current = null;
      }
    };
  }, [audioUrl, isMobile]);

  useEffect(() => {
    if (audioRef.current) {
      audioRef.current.volume = volume;
      // Update the CSS variable when volume changes through other means (like mute toggle)
      const volumeSlider = document.querySelector(
        '.volume-slider input[type="range"]'
      );
      if (volumeSlider) {
        volumeSlider.style.setProperty(
          "--volume-percentage",
          `${volume * 100}%`
        );
      }
    }
  }, [volume]);

  const updateTime = () => {
    if (audioRef.current) {
      setCurrentTime(audioRef.current.currentTime);
    }
  };

  const togglePlay = () => {
    if (!audioRef.current || isLoading) return;

    if (isPlaying) {
      audioRef.current.pause();
    } else {
      audioRef.current.play();
    }
    setIsPlaying(!isPlaying);
  };

  const formatTime = (time) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, "0")}`;
  };

  const handleSeek = (e) => {
    if (!audioRef.current || isLoading) return;
    const newTime = (e.target.value / 100) * duration;
    audioRef.current.currentTime = newTime;
    setCurrentTime(newTime);
  };

  const handleVolumeChange = (e) => {
    const newVolume = parseFloat(e.target.value);
    setVolume(newVolume);
    setIsMuted(newVolume === 0);
    // Update the CSS variable for the volume slider gradient
    e.target.style.setProperty("--volume-percentage", `${newVolume * 100}%`);
  };

  const toggleMute = () => {
    if (isMuted) {
      setVolume(previousVolume.current);
      setIsMuted(false);
    } else {
      previousVolume.current = volume;
      setVolume(0);
      setIsMuted(true);
    }
  };

  const VolumeIcon = () => {
    const volumePercent = volume * 100;

    if (volumePercent === 0 || isMuted) {
      console.log("muted");
      return (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="#FFFFFF"
        >
          <path
            d="M21.7803 3.53033C22.0732 3.23744 22.0732 2.76256 21.7803 2.46967C21.4874 2.17678 21.0126 2.17678 20.7197 2.46967L16.2705 6.91886C16.2246 6.39532 16.1646 5.93197 16.077 5.52977C15.9052 4.74135 15.6003 4.05581 14.9609 3.60646C14.7259 3.44128 14.4642 3.30809 14.1923 3.21531C13.3741 2.9361 12.5608 3.15928 11.7348 3.56055C10.9212 3.95576 9.93412 4.60663 8.70324 5.41822L8.43647 5.59411C7.98856 5.88944 7.83448 5.98815 7.67513 6.05848C7.50452 6.13378 7.3252 6.18757 7.14132 6.21862C6.96956 6.24762 6.7866 6.25003 6.25008 6.25003L6.08906 6.24998C4.87215 6.24933 4.02659 6.24889 3.27496 6.59664C2.58016 6.9181 1.91141 7.54732 1.54828 8.22128C1.15566 8.94996 1.10959 9.712 1.04409 10.7955L1.03618 10.926C1.01373 11.2943 1 11.6585 1 12C1 12.3416 1.01373 12.7058 1.03618 13.0741L1.04409 13.2045C1.10959 14.2881 1.15566 15.0501 1.54828 15.7788C1.91141 16.4527 2.58016 17.082 3.27496 17.4034C3.88551 17.6859 4.55803 17.7386 5.44121 17.7481L2.71967 20.4697C2.42678 20.7626 2.42678 21.2374 2.71967 21.5303C3.01256 21.8232 3.48744 21.8232 3.78033 21.5303L21.7803 3.53033Z"
            fill="#F2E1BC"
          />
          <g opacity="0.4">
            <path
              d="M16.2382 9.07225L7.61424 17.6963C8.00956 18.1712 9.02592 18.8138 9.33873 19.0002C10.3775 19.6809 11.2373 20.2249 11.9702 20.5491C12.7125 20.8775 13.4501 21.0381 14.1921 20.7849C14.464 20.6921 14.7257 20.5589 14.9607 20.3937C15.6668 19.8975 15.9657 19.1135 16.1276 18.2141C16.2868 17.3297 16.3412 16.1578 16.409 14.6979L16.4117 14.6404C16.4635 13.5254 16.4998 12.5522 16.4998 12.0002C16.4998 11.9729 16.5 11.9363 16.5002 11.8916C16.503 11.3245 16.5122 9.46272 16.2382 9.07225Z"
              fill="#F2E1BC"
            />
            <path
              d="M20.5143 6.31657C20.8918 6.14622 21.336 6.3142 21.5063 6.69176C21.9734 7.7269 22.4998 9.45974 22.4998 12.0002C22.4998 14.1917 22.108 15.783 21.6998 16.8444C21.496 17.3742 21.2892 17.7693 21.1273 18.0392C21.0464 18.174 20.9768 18.2774 20.9246 18.3505C20.8984 18.3871 20.8767 18.4161 20.86 18.4377C20.8516 18.4485 20.8446 18.4574 20.8389 18.4645L20.8314 18.4738L20.8284 18.4774L20.8271 18.4789C20.8271 18.4789 20.826 18.4803 20.2512 18.0013L20.826 18.4803C20.5608 18.7985 20.0879 18.8415 19.7697 18.5763C19.453 18.3124 19.4089 17.8428 19.6698 17.5246L19.6733 17.5202L19.6834 17.5068C19.6888 17.4996 19.6957 17.4902 19.704 17.4787C19.7337 17.437 19.7813 17.3669 19.8411 17.2674C19.9604 17.0685 20.1286 16.7512 20.2998 16.3059C20.6416 15.4173 20.9998 14.0086 20.9998 12.0002C20.9998 9.67383 20.5192 8.15116 20.1391 7.30865C19.9687 6.93109 20.1367 6.48692 20.5143 6.31657Z"
              fill="#F2E1BC"
            />
            <path
              d="M19.3006 9.84771C19.2164 9.44214 18.8194 9.18162 18.4138 9.26583C18.0082 9.35003 17.7477 9.74706 17.8319 10.1526C17.9204 10.5789 17.9998 11.1874 17.9998 12.0002C17.9998 12.99 17.882 13.6773 17.7733 14.1014C17.7189 14.3137 17.6665 14.461 17.6316 14.5482C17.6141 14.5918 17.601 14.6205 17.5941 14.6349L17.5891 14.6452C17.3953 15.0058 17.5266 15.4563 17.8856 15.6558C18.2477 15.8569 18.7043 15.7265 18.9054 15.3644L18.2509 15.0008C18.9054 15.3644 18.9061 15.3631 18.9061 15.3631L18.9069 15.3617L18.9086 15.3586L18.9124 15.3515L18.9221 15.3332C18.9293 15.3191 18.9382 15.3014 18.9484 15.2798C18.9689 15.2368 18.9949 15.1788 19.0243 15.1053C19.0831 14.9581 19.1557 14.7492 19.2263 14.4739C19.3676 13.923 19.4998 13.1103 19.4998 12.0002C19.4998 11.0891 19.4107 10.3782 19.3006 9.84771Z"
              fill="#F2E1BC"
            />
          </g>
        </svg>
      );
    } else if (volumePercent > 0 && volumePercent <= 25) {
      console.log("volume entre 0 et 25");
      return (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="#FFFFFF"
        >
          <path
            d="M5.00304 11.7155C5.04093 9.87326 5.05988 8.95215 5.68099 8.16363C5.79436 8.0197 5.9607 7.8487 6.10011 7.73274C6.86393 7.09741 7.8724 7.09741 9.88932 7.09741C10.6099 7.09741 10.9702 7.09741 11.3137 7.00452C11.385 6.98522 11.4556 6.96296 11.5253 6.93781C11.8608 6.81674 12.1616 6.60837 12.7632 6.19161C15.137 4.54738 16.3239 3.72527 17.3201 4.08241C17.5111 4.15088 17.6959 4.24972 17.8611 4.37162C18.7222 5.00744 18.7877 6.48675 18.9185 9.44538C18.967 10.5409 19 11.4785 19 12C19 12.5215 18.967 13.4591 18.9185 14.5546C18.7877 17.5132 18.7222 18.9926 17.8611 19.6284C17.6959 19.7503 17.5111 19.8491 17.3201 19.9176C16.3239 20.2747 15.137 19.4526 12.7632 17.8084C12.1616 17.3916 11.8608 17.1833 11.5253 17.0622C11.4556 17.037 11.385 17.0148 11.3137 16.9955C10.9702 16.9026 10.6099 16.9026 9.88932 16.9026C7.8724 16.9026 6.86393 16.9026 6.10011 16.2673C5.9607 16.1513 5.79436 15.9803 5.68099 15.8364C5.05988 15.0478 5.04093 14.1267 5.00304 12.2845C5.00104 12.1878 5 12.0928 5 12C5 11.9072 5.00104 11.8122 5.00304 11.7155Z"
            fill="#F2E1BC"
          />
        </svg>
      );
    } else if (volumePercent > 25 && volumePercent <= 60) {
      console.log("volume entre 25 et 60");
      return (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="#FFFFFF"
        >
          <path
            d="M3.00312 11.7155C3.0421 9.87326 3.06159 8.95215 3.70045 8.16363C3.81705 8.0197 3.98814 7.8487 4.13153 7.73274C4.91718 7.09741 5.95444 7.09741 8.02898 7.09741C8.77016 7.09741 9.14074 7.09741 9.49401 7.00452C9.56741 6.98522 9.64004 6.96296 9.71173 6.93781C10.0567 6.81674 10.3661 6.60837 10.985 6.19161C13.4265 4.54738 14.6473 3.72527 15.672 4.08241C15.8684 4.15088 16.0586 4.24972 16.2284 4.37162C17.1142 5.00744 17.1815 6.48675 17.3161 9.44537C17.3659 10.5409 17.3999 11.4785 17.3999 12C17.3999 12.5215 17.3659 13.4591 17.3161 14.5546C17.1815 17.5132 17.1142 18.9926 16.2284 19.6284C16.0586 19.7503 15.8684 19.8491 15.672 19.9176C14.6473 20.2747 13.4265 19.4526 10.985 17.8084C10.3661 17.3916 10.0567 17.1833 9.71173 17.0622C9.64004 17.037 9.56741 17.0148 9.49401 16.9955C9.14074 16.9026 8.77016 16.9026 8.02898 16.9026C5.95444 16.9026 4.91718 16.9026 4.13153 16.2673C3.98814 16.1513 3.81705 15.9803 3.70045 15.8364C3.06159 15.0478 3.0421 14.1267 3.00312 12.2845C3.00107 12.1878 3 12.0928 3 12C3 11.9072 3.00107 11.8122 3.00312 11.7155Z"
            fill="#F2E1BC"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M19.4503 8.41595C19.7979 8.21871 20.2363 8.34663 20.4294 8.70166L19.8 9.0588C20.4294 8.70166 20.4294 8.70166 20.4294 8.70166L20.4301 8.70295L20.4308 8.70432L20.4324 8.7073L20.4361 8.71428L20.4454 8.73227C20.4523 8.74607 20.4609 8.76348 20.4707 8.78457C20.4904 8.82676 20.5153 8.88363 20.5435 8.95574C20.6 9.10004 20.6697 9.3049 20.7374 9.57476C20.8731 10.115 21 10.9119 21 12.0003C21 13.0888 20.8731 13.8857 20.7374 14.4259C20.6697 14.6958 20.6 14.9007 20.5435 15.045C20.5153 15.1171 20.4904 15.1739 20.4707 15.2161C20.4609 15.2372 20.4523 15.2546 20.4454 15.2684L20.4361 15.2864L20.4324 15.2934L20.4308 15.2964L20.4301 15.2978C20.4301 15.2978 20.4294 15.299 19.8 14.9419L20.4294 15.299C20.2363 15.6541 19.7979 15.782 19.4503 15.5847C19.1057 15.3892 18.9797 14.9474 19.1658 14.5938L19.1706 14.5838C19.1772 14.5697 19.1898 14.5415 19.2065 14.4987C19.24 14.4132 19.2903 14.2688 19.3426 14.0606C19.447 13.6448 19.56 12.9709 19.56 12.0003C19.56 11.0298 19.447 10.3559 19.3426 9.94007C19.2903 9.73193 19.24 9.58748 19.2065 9.50197C19.1898 9.45918 19.1772 9.43102 19.1706 9.41691L19.1658 9.40687C18.9797 9.05332 19.1057 8.61152 19.4503 8.41595Z"
            fill="#F2E1BC"
          />
        </svg>
      );
    } else if (volumePercent > 60) {
      console.log("volume superieur a 60");
      return (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="#FFFFFF"
        >
          <path
            d="M2.00299 11.7155C2.04033 9.87326 2.059 8.95215 2.67093 8.16363C2.78262 8.0197 2.9465 7.8487 3.08385 7.73274C3.83639 7.09741 4.82995 7.09741 6.81706 7.09741C7.527 7.09741 7.88197 7.09741 8.22035 7.00452C8.29067 6.98522 8.36024 6.96296 8.4289 6.93781C8.75936 6.81674 9.05574 6.60837 9.64851 6.19161C11.9872 4.54738 13.1565 3.72527 14.138 4.08241C14.3261 4.15088 14.5083 4.24972 14.671 4.37162C15.5194 5.00744 15.5839 6.48675 15.7128 9.44537C15.7606 10.5409 15.7931 11.4785 15.7931 12C15.7931 12.5215 15.7606 13.4591 15.7128 14.5546C15.5839 17.5132 15.5194 18.9926 14.671 19.6284C14.5083 19.7503 14.3261 19.8491 14.138 19.9176C13.1565 20.2747 11.9872 19.4526 9.64851 17.8084C9.05574 17.3916 8.75936 17.1833 8.4289 17.0622C8.36024 17.037 8.29067 17.0148 8.22035 16.9955C7.88197 16.9026 7.52701 16.9026 6.81706 16.9026C4.82995 16.9026 3.83639 16.9026 3.08385 16.2673C2.9465 16.1513 2.78262 15.9803 2.67093 15.8364C2.059 15.0478 2.04033 14.1267 2.00299 12.2845C2.00103 12.1878 2 12.0928 2 12C2 11.9072 2.00103 11.8122 2.00299 11.7155Z"
            fill="#F2E1BC"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M19.4895 5.55219C19.7821 5.29218 20.217 5.33434 20.4608 5.64635L19.931 6.11713C20.4608 5.64635 20.4606 5.64602 20.4608 5.64635L20.4619 5.6477L20.4631 5.64921L20.4658 5.65275L20.4727 5.66184C20.4779 5.6688 20.4844 5.67756 20.4921 5.68814C20.5075 5.70929 20.5275 5.73772 20.5515 5.77358C20.5995 5.84529 20.6635 5.94667 20.7379 6.07889C20.8868 6.34345 21.077 6.73092 21.2644 7.25038C21.6397 8.29107 22 9.85136 22 12.0002C22 14.1491 21.6397 15.7094 21.2644 16.7501C21.077 17.2695 20.8868 17.657 20.7379 17.9216C20.6635 18.0538 20.5995 18.1552 20.5515 18.2269C20.5275 18.2627 20.5075 18.2912 20.4921 18.3123C20.4844 18.3229 20.4779 18.3317 20.4727 18.3386L20.4658 18.3477L20.4631 18.3513L20.4619 18.3528C20.4616 18.3531 20.4608 18.3541 19.931 17.8833L20.4608 18.3541C20.217 18.6661 19.7821 18.7083 19.4895 18.4483C19.1983 18.1895 19.1578 17.729 19.3977 17.417C19.3983 17.4163 19.3994 17.4148 19.4009 17.4127C19.4058 17.406 19.4154 17.3925 19.4291 17.372C19.4565 17.3311 19.5003 17.2625 19.5552 17.1649C19.6649 16.9698 19.8195 16.6587 19.977 16.2221C20.2913 15.3508 20.6207 13.9695 20.6207 12.0002C20.6207 10.0309 20.2913 8.64968 19.977 7.77836C19.8195 7.34181 19.6649 7.03066 19.5552 6.8356C19.5003 6.73802 19.4565 6.66934 19.4291 6.62845C19.4154 6.608 19.4058 6.59449 19.4009 6.58778C19.3994 6.58561 19.3983 6.58416 19.3977 6.5834C19.3977 6.5834 19.3977 6.58341 19.3977 6.5834"
            fill="#F2E1BC"
          />
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M17.7571 8.41595C18.0901 8.21871 18.51 8.34663 18.6949 8.70166L18.0921 9.0588C18.6949 8.70166 18.6948 8.70134 18.6949 8.70166L18.6956 8.70295L18.6963 8.70432L18.6978 8.7073L18.7014 8.71428L18.7102 8.73227C18.7169 8.74607 18.7251 8.76348 18.7345 8.78457C18.7533 8.82676 18.7772 8.88363 18.8042 8.95574C18.8584 9.10004 18.9251 9.3049 18.99 9.57476C19.1199 10.115 19.2415 10.9119 19.2415 12.0003C19.2415 13.0888 19.1199 13.8857 18.99 14.4259C18.9251 14.6958 18.8584 14.9007 18.8042 15.045C18.7772 15.1171 18.7533 15.1739 18.7345 15.2161C18.7251 15.2372 18.7169 15.2546 18.7102 15.2684L18.7014 15.2864L18.6978 15.2934L18.6963 15.2964L18.6956 15.2978C18.6954 15.2981 18.6949 15.299 18.0921 14.9419L18.6949 15.299C18.51 15.6541 18.0901 15.782 17.7571 15.5847C17.427 15.3892 17.3063 14.9474 17.4846 14.5938L17.4892 14.5838C17.4955 14.5697 17.5076 14.5415 17.5236 14.4987C17.5557 14.4132 17.6039 14.2688 17.6539 14.0606C17.7539 13.6448 17.8622 12.9709 17.8622 12.0003C17.8622 11.0298 17.7539 10.3559 17.6539 9.94007C17.6039 9.73193 17.5557 9.58748 17.5236 9.50197C17.5076 9.45918 17.4955 9.43102 17.4892 9.41691L17.4846 9.40687C17.3063 9.05332 17.4271 8.61152 17.7571 8.41595Z"
            fill="#F2E1BC"
          />
        </svg>
      );
    } else {
      console.log("default");
      return (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="#FFFFFF"
        >
          <path
            d="M2.00299 11.7155C2.04033 9.87326 2.059 8.95215 2.67093 8.16363C2.78262 8.0197 2.9465 7.8487 3.08385 7.73274C3.83639 7.09741 4.82995 7.09741 6.81706 7.09741C7.527 7.09741 7.88197 7.09741 8.22035 7.00452C8.29067 6.98522 8.36024 6.96296 8.4289 6.93781C8.75936 6.81674 9.05574 6.60837 9.64851 6.19161C11.9872 4.54738 13.1565 3.72527 14.138 4.08241C14.3261 4.15088 14.5083 4.24972 14.671 4.37162C15.5194 5.00744 15.5839 6.48675 15.7128 9.44537C15.7606 10.5409 15.7931 11.4785 15.7931 12C15.7931 12.5215 15.7606 13.4591 15.7128 14.5546C15.5839 17.5132 15.5194 18.9926 14.671 19.6284C14.5083 19.7503 14.3261 19.8491 14.138 19.9176C13.1565 20.2747 11.9872 19.4526 9.64851 17.8084C9.05574 17.3916 8.75936 17.1833 8.4289 17.0622C8.36024 17.037 8.29067 17.0148 8.22035 16.9955C7.88197 16.9026 7.52701 16.9026 6.81706 16.9026C4.82995 16.9026 3.83639 16.9026 3.08385 16.2673C2.9465 16.1513 2.78262 15.9803 2.67093 15.8364C2.059 15.0478 2.04033 14.1267 2.00299 12.2845C2.00103 12.1878 2 12.0928 2 12C2 11.9072 2.00103 11.8122 2.00299 11.7155Z"
            fill="#F2E1BC"
          />
          <path
            opacity="0.7"
            fillRule="evenodd"
            clipRule="evenodd"
            d="M17.7572 8.41592C18.0902 8.21868 18.51 8.34659 18.695 8.70163L18.0921 9.05876C18.695 8.70163 18.695 8.70163 18.695 8.70163L18.6957 8.70291L18.6964 8.70428L18.6979 8.70727L18.7014 8.71425L18.7103 8.73224C18.717 8.74604 18.7251 8.76345 18.7345 8.78454C18.7534 8.82672 18.7772 8.88359 18.8043 8.95571C18.8584 9.1 18.9252 9.30487 18.9901 9.57473C19.12 10.1149 19.2415 10.9118 19.2415 12.0003C19.2415 13.0888 19.12 13.8857 18.9901 14.4259C18.9252 14.6958 18.8584 14.9006 18.8043 15.0449C18.7772 15.117 18.7534 15.1739 18.7345 15.2161C18.7251 15.2372 18.717 15.2546 18.7103 15.2684L18.7014 15.2864L18.6979 15.2934L18.6964 15.2963L18.6957 15.2977C18.6957 15.2977 18.695 15.299 18.0921 14.9419L18.695 15.299C18.51 15.654 18.0902 15.782 17.7572 15.5847C17.4271 15.3891 17.3063 14.9474 17.4846 14.5938L17.4892 14.5838C17.4955 14.5696 17.5076 14.5415 17.5236 14.4987C17.5557 14.4132 17.6039 14.2687 17.654 14.0606C17.754 13.6448 17.8622 12.9709 17.8622 12.0003C17.8622 11.0297 17.754 10.3558 17.654 9.94003C17.6039 9.73189 17.5557 9.58745 17.5236 9.50194C17.5076 9.45915 17.4955 9.43099 17.4892 9.41687L17.4846 9.40684C17.3063 9.05328 17.4271 8.61149 17.7572 8.41592Z"
            fill="#F2E1BC"
          />
          <path
            opacity="0.4"
            fillRule="evenodd"
            clipRule="evenodd"
            d="M19.4894 5.5523C19.782 5.29229 20.2169 5.33445 20.4607 5.64646L19.9309 6.11724C20.4607 5.64646 20.4607 5.64646 20.4607 5.64646L20.4617 5.64781L20.4629 5.64933L20.4656 5.65286L20.4726 5.66195C20.4778 5.66891 20.4843 5.67767 20.492 5.68825C20.5073 5.7094 20.5273 5.73783 20.5513 5.77369C20.5994 5.8454 20.6634 5.94678 20.7378 6.07901C20.8866 6.34356 21.0769 6.73103 21.2642 7.25049C21.6396 8.29118 21.9998 9.85148 21.9998 12.0003C21.9998 14.1492 21.6396 15.7095 21.2642 16.7502C21.0769 17.2697 20.8866 17.6571 20.7378 17.9217C20.6634 18.0539 20.5994 18.1553 20.5513 18.227C20.5273 18.2629 20.5073 18.2913 20.492 18.3124C20.4843 18.323 20.4778 18.3318 20.4726 18.3387L20.4656 18.3478L20.4629 18.3514L20.4617 18.3529C20.4617 18.3529 20.4607 18.3542 19.9309 17.8834L20.4607 18.3542C20.2169 18.6662 19.782 18.7084 19.4894 18.4484C19.1982 18.1896 19.1576 17.7291 19.3976 17.4172C19.3976 17.4172 19.3992 17.4149 19.4008 17.4128C19.4056 17.4061 19.4153 17.3926 19.429 17.3721C19.4563 17.3312 19.5001 17.2626 19.555 17.165C19.6648 16.9699 19.8194 16.6588 19.9769 16.2222C20.2911 15.3509 20.6205 13.9696 20.6205 12.0003C20.6205 10.031 20.2911 8.64979 19.9769 7.77847C19.8194 7.34192 19.6648 7.03077 19.555 6.83571C19.5001 6.73813 19.4563 6.66945 19.429 6.62856C19.4153 6.60811 19.4056 6.5946 19.4008 6.58789C19.3992 6.58572 19.3976 6.58351 19.3976 6.58351"
            fill="#F2E1BC"
          />
        </svg>
      );
    }
  };

  if (error) {
    return (
      <div className="player-error">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="currentColor"
          className="w-4 h-4"
        >
          <path
            fillRule="evenodd"
            d="M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25zm-1.72 6.97a.75.75 0 10-1.06 1.06L10.94 12l-1.72 1.72a.75.75 0 101.06 1.06L12 13.06l1.72 1.72a.75.75 0 101.06-1.06L13.06 12l1.72-1.72a.75.75 0 10-1.06-1.06L12 10.94l-1.72-1.72z"
            clipRule="evenodd"
          />
        </svg>
        {error}
      </div>
    );
  }

  return (
    <div className="audio-player">
      <div className="player-controls">
        <button
          className="play-button"
          onClick={togglePlay}
          disabled={isLoading || isBuffering}
          aria-label={isPlaying ? "Pause" : "Play"}
        >
          {isLoading ? (
            <svg data-icon="loading" viewBox="0 0 24 24" width="24" height="24">
              <circle
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                strokeWidth="4"
                fill="none"
              />
            </svg>
          ) : isPlaying ? (
            <svg data-icon="pause" viewBox="0 0 24 24" width="24" height="24">
              <path fill="currentColor" d="M6 19h4V5H6v14zm8-14v14h4V5h-4z" />
            </svg>
          ) : (
            <svg data-icon="play" viewBox="0 0 24 24" width="24" height="24">
              <path fill="currentColor" d="M8 5v14l11-7z" />
            </svg>
          )}
        </button>

        <div className="progress-container">
          <div className="progress-bar">
            <input
              type="range"
              min="0"
              max="100"
              value={(currentTime / duration) * 100 || 0}
              onChange={handleSeek}
              disabled={isLoading || isBuffering}
            />
          </div>
          <div className="time-display">
            <span>{formatTime(currentTime)}</span>
            <span>{formatTime(duration)}</span>
          </div>
        </div>

        <div className="volume-container">
          <button
            className="volume-button"
            onClick={toggleMute}
            aria-label={isMuted ? "Unmute" : "Mute"}
          >
            <VolumeIcon />
          </button>
          <div className="volume-slider">
            <input
              type="range"
              min="0"
              max="1"
              step="0.01"
              value={volume}
              onChange={handleVolumeChange}
            />
          </div>
        </div>
      </div>
    </div>
  );
}
